// _______________	internal packages  _______________ //
import { Fragment } from 'react';
import Head from 'next/head';
import { Router } from 'next/router';

// _______________	external packages	_______________ //
import { ToastContainer } from 'react-toastify';
import nprogress from 'nprogress';

// _______________	componnents	______________s_ //
import { useDidMount } from '@hooks';
import { universal_account, universal_app } from '@context';
import { LocalStorageAPI, ServiceWorker } from '@utils';

// _______________	styles	_______________ //
import '@assets/style/app.scss';
import '@assets/packages/styles.scss';

console.clear();

const LayoutContainer = ({ children }) => {
	const { state: appState } = universal_app.useContext();

	const { setLanguage, setPlatform, setResponsiveSize, setTheme, setWindowSize } = universal_app.useActions();
	const { checkAndSetAccount } = universal_account.useActions();

	useDidMount(() => {
		// if (!LocalStorageAPI.getItem('work_time')) {
		// 	LocalStorageAPI.setItem('work_time', {}, 'json');
		// }
		// set basic data
		// setTheme({ theme: localStorage.getItem('_theme') || 'dark' });
		// setLanguage({ language: localStorage.getItem('_language') || 'fa' });
		setResponsiveSize();
		setPlatform();
		// checkAndSetAccount();
		// sw register
		ServiceWorker.register();
	});

	useDidMount(() => {
		const resizeHandler = (event?: Event) => {
			setWindowSize({ event });
		};

		try {
			resizeHandler();

			window?.addEventListener('resize', resizeHandler);

			return () => {
				window?.removeEventListener('resize', resizeHandler);
			};
		} catch (error) {}
	});

	return (
		<Fragment>
			{children}

			<ToastContainer
				position={appState.language === 'fa' ? 'top-left' : 'top-right'}
				draggable={true}
				closeOnClick={true}
				autoClose={4000}
				closeButton={false}
				limit={5}
				rtl={appState.language === 'fa' ? true : true}
				icon={false}
			/>
		</Fragment>
	);
};

const MyApp = ({ Component, pageProps }) => {
	Router.events.on('routeChangeStart', () => nprogress.start());
	Router.events.on('routeChangeComplete', () => nprogress.done());
	Router.events.on('routeChangeError', () => nprogress.done());

	const getLayout = Component.getLayout ?? ((page) => page);

	return (
		<Fragment>
			<Head>
				<meta name='viewport' content='initial-scale=1, width=device-width' />
				<meta name='description' content='Generated by create next app' />
				{/* <link rel="icon" href="/favicon.ico" /> */}
				<title>ساعت کاری</title>
			</Head>
			<universal_app.Provider>
				<universal_account.Provider>
					<LayoutContainer>{getLayout(<Component {...pageProps} />)}</LayoutContainer>
				</universal_account.Provider>
			</universal_app.Provider>
		</Fragment>
	);
};

export default MyApp;
